buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = '0.0.0.0'
group = 'multiteam.claysoldiers2' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'claysoldiers2'

// Mojang ships Java 16 to end users in 1.17+ instead of Java 8 in 1.16 or lower, so your mod should target Java 16.
java.toolchain.languageVersion = JavaLanguageVersion.of(16)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'official', version: '1.17.1'

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            mods {
                claysoldiers2 {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            mods {
                claysoldiers2 {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--mod', 'claysoldiers2', '--all',
                    '--existing', file('src/main/resources/'),
                    '-existing', file('src/generated/resources'),
                    '--output', file('src/generated/resources/')

            mods {
                claysoldiers2 {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {

    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven { url "https://github.com/MultiTeamDevGroup/MultiTeam-Maven/raw/main/" }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.17.1-37.0.71'

    runtimeOnly fg.deobf("mezz.jei:jei-1.17.1:8.1.0.19")

    runtimeOnly fg.deobf("multiteam.multicorelib:MultiCore-Lib:1.17.1-0.1.1.7")
    compileOnly fg.deobf("multiteam.multicorelib:MultiCore-Lib:1.17.1-0.1.1.7")

    runtimeOnly fg.deobf('software.bernie.geckolib:geckolib-1.17.1:3.0.2')
    compileOnly fg.deobf('software.bernie.geckolib:geckolib-1.17.1:3.0.2')

}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "claysoldiers2",
                "Specification-Vendor"    : "claysoldiers2sareus",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "claysoldiers2sareus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }

    repositories {
        maven { url 'file://${project.projectDir}/mcmodsrepo' }
    }
}
